diff --git a/Fugu15KernelExploit/Sources/Fugu15KernelExploit/Fugu15.swift b/Fugu15KernelExploit/Sources/Fugu15KernelExploit/Fugu15.swift
index 1720736..5b067fb 100644
--- a/Fugu15KernelExploit/Sources/Fugu15KernelExploit/Fugu15.swift
+++ b/Fugu15KernelExploit/Sources/Fugu15KernelExploit/Fugu15.swift
@@ -142,13 +142,13 @@ public struct Fugu15 {
      * - Warning: This function blocks, do not call it on the main dispatch queue
      */
     public static func launchKernelExploit(oobPCI: URL, logger: @escaping (_ msg: String) -> Void) throws {
-        switch supportsThisDevice() {
-        case .yes:
-            break
+        //switch supportsThisDevice() {
+        //case .yes:
+        //    break
             
-        case .no(reason: let reason):
-            throw Fugu15LaunchError.deviceNotSupported(reason: reason)
-        }
+        //case .no(reason: let reason):
+        //    throw Fugu15LaunchError.deviceNotSupported(reason: reason)
+        //}
         
         // Create pipes to use for communication
         // We use control and log pipes
diff --git a/Fugu15KernelExploit/Sources/Fugu15KernelExploit/oobPCI.swift b/Fugu15KernelExploit/Sources/Fugu15KernelExploit/oobPCI.swift
index e3ae4b5..5dda25c 100644
--- a/Fugu15KernelExploit/Sources/Fugu15KernelExploit/oobPCI.swift
+++ b/Fugu15KernelExploit/Sources/Fugu15KernelExploit/oobPCI.swift
@@ -301,7 +301,7 @@ extension Fugu15 {
         cachedBootInfo[name] = value
     }
 
-    internal static func runPatchfinder(kernelslide: UInt64, receiveHandler: (_ index: Int, _ name: String, _ value: Any) -> Void) -> Bool {
+    public static func runPatchfinder(kernelslide: UInt64, receiveHandler: (_ index: Int, _ name: String, _ value: Any) -> Void) -> Bool {
         var ok: Bool = false
         repeat {
             Logger.print("Loading kernel...")
diff --git a/KernelPatchfinder/Sources/KernelPatchfinder/KernelPatchfinder.swift b/KernelPatchfinder/Sources/KernelPatchfinder/KernelPatchfinder.swift
index 073ee97..62bd8ff 100644
--- a/KernelPatchfinder/Sources/KernelPatchfinder/KernelPatchfinder.swift
+++ b/KernelPatchfinder/Sources/KernelPatchfinder/KernelPatchfinder.swift
@@ -1589,4 +1589,44 @@ open class KernelPatchfinder {
             pc -= 4
         }
     }()
+    
+    public static func testPatchfinder() throws {
+        
+        guard let pf = KernelPatchfinder.running else {
+            print("error")
+            return
+        }
+
+        print(pf.allproc)
+        print(pf.cpu_ttep)
+        print(pf.pmap_enter_options_addr)
+        print(pf.hw_lck_ticket_reserve_orig_allow_invalid_signed)
+        print(pf.hw_lck_ticket_reserve_orig_allow_invalid)
+        print(pf.br_x22_gadget)
+        print(pf.exception_return)
+        print(pf.ldp_x0_x1_x8_gadget)
+        print(pf.exception_return_after_check)
+        print(pf.exception_return_after_check_no_restore)
+        print(pf.str_x8_x9_gadget)
+        print(pf.str_x0_x19_ldr_x20)
+        print(pf.pmap_set_nested)
+        print(pf.pmap_nest)
+        print(pf.pmap_remove_options)
+        print(pf.pmap_mark_page_as_ppl_page)
+        print(pf.pmap_create_options)
+        print(pf.gIOCatalogue)
+        print(pf.terminateDriversForModule)
+        print(pf.kalloc_data_external)
+        print(pf.ml_sign_thread_state)
+        print(pf.ppl_handler_table)
+        print(pf.pmap_image4_trust_caches)
+        print(pf.kernel_el)
+        print(pf.TH_RECOVER)
+        print(pf.TH_KSTACKPTR)
+        print(pf.ACT_CONTEXT)
+        print(pf.ACT_CPUDATAP)
+        print(pf.ITK_SPACE)
+        print(pf.VM_MAP_PMAP)
+        print(pf.PORT_LABEL)
+    }
 }
